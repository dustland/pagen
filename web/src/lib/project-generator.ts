import { type FileContent } from '@/types/project'
import * as fs from 'fs/promises'
import * as path from 'path'

const copyTemplateFiles = async (targetDir: string) => {
  const templateDir = path.join(process.cwd(), 'src/project-template');
  
  // Function to recursively copy directory
  const copyDir = async (src: string, dest: string) => {
    await fs.mkdir(dest, { recursive: true });
    const entries = await fs.readdir(src, { withFileTypes: true });

    for (const entry of entries) {
      const srcPath = path.join(src, entry.name);
      const destPath = path.join(dest, entry.name);

      if (entry.isDirectory()) {
        await copyDir(srcPath, destPath);
      } else {
        await fs.copyFile(srcPath, destPath);
      }
    }
  };

  await copyDir(templateDir, targetDir);
};

export function generateNextProject(content: string): FileContent[] {
  // First ensure the content uses relative paths for imports
  const processedContent = content
    .replace(
      /from ["']@\/components\/ui\/(.*?)["']/g,
      'from "../components/ui/$1"'
    )
    .replace(
      /from ["']@\/lib\/(.*?)["']/g,
      'from "../lib/$1"'
    );

  return [
    {
      path: 'app/page.tsx',
      content: processedContent
    },
    {
      path: 'app/layout.tsx',
      content: `
import './globals.css'
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'Generated Next.js App',
  description: 'Generated by Pagen',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}`
    }
  ]
}

interface GenerateProjectOptions {
  skipTemplate?: boolean;
}

export const generateProject = async (
  page: { content: string },
  outputDir: string,
  options: GenerateProjectOptions = {}
): Promise<void> => {
  // Copy template files first (unless skipped)
  if (!options.skipTemplate) {
    await copyTemplateFiles(outputDir);
  }
  
  // Then generate the rest of the project files
  const projectFiles = generateNextProject(page.content);
  for (const file of projectFiles) {
    const filePath = path.join(outputDir, file.path);
    await fs.mkdir(path.dirname(filePath), { recursive: true });
    await fs.writeFile(filePath, file.content);
  }
};
